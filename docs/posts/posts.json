[
  {
    "path": "posts/2021-11-02-sf-crime-and-hilliness/",
    "title": "San Francisco Crime and Hilliness",
    "description": "Anyone who has been to San Francisco is familiar with the hilly terrain and roads that seem to climb into the clouds. But does this topography have an effect on where car break-ins happen? I wanted to take a look at this relationship with visualizations and a linear regression analysis.",
    "author": [
      {
        "name": "Alex Clippinger",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "R",
      "GIS"
    ],
    "contents": "\r\n\r\nContents\r\nResearch Question\r\nBackground\r\n\r\nData Collection\r\nImportant Variables\r\nData Sources\r\n\r\nAnalysis Plan\r\nMerge Data\r\nVisualize simple relationships\r\nRegression Analysis\r\nTest OLS Assumptions\r\n\r\nResults\r\n\r\n\r\nThat is one steep street!\r\nResearch Question\r\nMy research question is: \"What is the relationship between topography and car break-ins in San Francisco?\r\nBackground\r\nThis analysis will focus on the link between elevation and “hilliness” in determining the likelihood of car break-ins in San Francisco. Both terrain and motor vehicle crimes are ubiquitous when discussing living or visiting San Francisco. This relationship has been coined by the phrase - “Crime Doesn’t Climb”.\r\nIn April 2021, Young-An Kim & James C. Wo published Topography and crime in place: The effects of elevation, slope, and betweenness in San Francisco street segments. Their study provides a robust regression analysis on the effects of elevation, slope, and “hilliness” on crime, controlling for socio-demographic characteristics Kim and Wo (2021). My analysis will focus only on car break-ins rather than all crime reports, as I believe that these crimes will have an even more pronounced relationship with topography.\r\nData Collection\r\nIn order to collect data, we first need to identify our key variables.\r\nImportant Variables\r\nDependent variable: Crime (specifically car break-ins)\r\nIndependent variables: Slope and elevation\r\nControl variables: Median income by census block\r\nWhen discussing topography, both elevation and “hilliness,” or slope, are necessary for inclusion. This is because it more accurately captures the effect of local level topography, which is supported by Kim & Wo.\r\nIn any econometric analysis, it is vital to control for socio-economic variables. In this case, it could be that higher elevations in the city are more affluent areas, which may have an impact on crime. Thus, we want to include median income as a control variable.\r\nHere is the regression equation:\r\n\\[MotorVehicleTheft_i = \\beta_0 + \\beta_1Elevation_i + \\beta_2Slope_i + \\beta_3MedianIncome_i + u_i\\]\r\nData Sources\r\nCrime and elevation data for this analysis were retrieved from the San Francisco Open Data Portal.\r\nCrime Data - All crime reports from 2018-01-01 to 2021-11-04.\r\nElevation contours - 5 ft. elevation contours\r\nAreas with high slope - Shapefile with polygons of areas with slopes greater than or equal to 20 percent.\r\nSocio-economic data (median income) was retrieved through the tidycensus package via the US Census Bureau.\r\nAnalysis Plan\r\nThe analysis plan steps to address this research question are as follows:\r\nIdentify question*\r\nSelect key variables (based on existing literature)*\r\nCollect data*\r\nMerge data\r\nVisualize simple relationships\r\nTest OLS assumptions\r\nConduct regression analysis\r\nInterpret Results\r\nCompleted in previous sections*\r\nMerge Data\r\nThe following code chunk demonstrates how the crime, elevation, slope, and income datasets were merged.\r\n\r\n\r\nShow code\r\n\r\n# Find index of nearest contour to each crime\r\nelev <- st_nearest_feature(x = crimes, y = contours)\r\n\r\n# Add elevation and binary slope columns\r\ncrimes <- crimes %>% \r\n  st_join(y = slopes_over_20, join = st_within, left = TRUE) %>% \r\n  st_join(y = census_geom, join = st_within, left = TRUE) %>% \r\n  mutate(elev = contours[elev,]$elevation,\r\n         slope_over_20 = case_when(is.na(slope_over_20) ~ 0, TRUE ~ 1)) %>%\r\n  rename(median_income = estimate) %>% \r\n  select(date_incid, slope_over_20, median_income, elev, geometry)\r\n\r\n\r\n\r\nVisualize simple relationships\r\nThe following plots show the simple relationships between count of car break ins and the three independent variables (elevation, slope, and median income). We see there is a negative correlation between elevation and crime. It is possible that this relationship is not linear, so this variable may fit better if we take the natural log. Since slope in this analysis is a binary variable, we simply see that there are more crimes in areas that are not designated high slope. Lastly, we observe a weak negative correlation between median income and car break-ins.\r\n\r\n\r\nShow code\r\n\r\n# Group by income only\r\nincome_summary <- crimes %>% \r\n  st_drop_geometry() %>% \r\n  group_by(median_income) %>% \r\n  summarize(count = n())\r\n\r\nincome_plot = ggplot(data = income_summary, aes(x = median_income, y = count)) +\r\n  geom_point() +\r\n  geom_smooth(method = \"lm\") +\r\n  theme_classic() +\r\n  labs(title = \"Crime and Median Income\",\r\n       x = \"Median Income (USD)\",\r\n       y = \"Number of Break-Ins\")\r\n\r\n# Group by elevation\r\nelev_summary <- crimes %>% \r\n  st_drop_geometry() %>% \r\n  group_by(elev) %>% \r\n  summarize(count = n())\r\n\r\nelev_plot <- ggplot(data = elev_summary, aes(x = elev, y = count)) +\r\n  geom_point() +\r\n  geom_smooth(method = \"lm\") +\r\n  theme_classic() +\r\n  labs(title = \"Crime and Elevation\",\r\n       x = \"Elevation (feet)\",\r\n       y = \"Number of Break-Ins\")\r\n\r\n# Group by slope\r\nslope_summary <- crimes %>% \r\n  st_drop_geometry() %>% \r\n  group_by(slope_over_20) %>% \r\n  summarize(count = n())\r\n\r\nslope_plot <- ggplot(data = slope_summary, aes(x = slope_over_20, y = count)) +\r\n  geom_col() +\r\n  #geom_smooth(method = \"lm\") +\r\n  theme_classic() +\r\n  #scale_x_discrete(c(0.0,1.0)) +\r\n  labs(title = \"Crime and Slope\",\r\n       x = \"Crime in High Slope Area\",\r\n       y = \"Number of Break-Ins\")\r\n\r\nelev_plot + (slope_plot / income_plot)\r\n\r\n\r\n\r\n\r\nThe following plots show crimes over the time period of our data. We can see that there is a slight upward trend to our crime data.\r\n\r\n\r\nShow code\r\n\r\n# Group by all three variables\r\ncrimes_summary <- crimes %>% \r\n  st_drop_geometry() %>% \r\n  group_by(slope_over_20, median_income, elev) %>% \r\n  summarize(count = n())\r\n\r\n# Group by date\r\ncrimes_ts <- crimes %>% \r\n  st_drop_geometry() %>% \r\n  group_by(date_incid) %>% \r\n  summarize(count = n())\r\n\r\nts_plot <- ggplot(data = crimes_ts, aes(x = date_incid, y = count)) +\r\n  geom_point() +\r\n  geom_smooth(method = \"lm\") +\r\n  theme_classic()\r\n\r\ncrimes_monthly <- crimes_ts %>% \r\n  mutate(month = lubridate::floor_date(date_incid, \"month\")) %>% \r\n  group_by(month) %>% \r\n  summarize(monthly_sum = sum(count))\r\n\r\nmonthly_plot <- ggplot(data = crimes_monthly, aes(x = month, y = monthly_sum)) +\r\n  geom_point() +\r\n  geom_line() + \r\n  #geom_smooth(method = \"lm\") +\r\n  theme_classic()\r\n\r\nts_plot + monthly_plot\r\n\r\n\r\n\r\n\r\n\r\n\r\nShow code\r\n\r\nelev_map <- ggplot(data = crimes) +\r\n  geom_sf(aes(color = elev)) +\r\n  theme_minimal() +\r\n  theme(axis.text = element_blank(),\r\n        legend.position = \"bottom\",\r\n        legend.title = element_blank()) +\r\n  labs(title = \"Crime by Elevation\")\r\n\r\nslope_map <- ggplot(data = crimes) +\r\n  geom_sf(aes(color = slope_over_20)) +\r\n  theme_minimal() +\r\n  theme(axis.text = element_blank(),\r\n        legend.position = \"bottom\",\r\n        legend.title = element_blank()) +\r\n  labs(title = \"Crime by Slope\")\r\n\r\nincome_map <- ggplot(data = crimes) +\r\n  geom_sf(aes(color = median_income)) +\r\n  theme_minimal() +\r\n  theme(axis.text = element_blank(),\r\n        legend.position = \"bottom\",\r\n        legend.title = element_blank()) +\r\n  labs(title = \"Crime by Median Income\")\r\n\r\nelev_map + (slope_map / income_map)\r\n\r\n\r\n\r\n\r\nRegression Analysis\r\n\r\n\r\nShow code\r\n\r\nmodel <- lm(formula = count ~ elev + slope_over_20 + median_income, data = crimes_summary)\r\n\r\nmodel %>% \r\n  summary() %>% \r\n  xtable() %>% \r\n  kable()\r\n\r\n\r\n\r\n\r\n\r\nEstimate\r\n\r\n\r\nStd. Error\r\n\r\n\r\nt value\r\n\r\n\r\nPr(>|t|)\r\n\r\n\r\n(Intercept)\r\n\r\n\r\n14.9684913\r\n\r\n\r\n0.6888909\r\n\r\n\r\n21.728391\r\n\r\n\r\n0.0000000\r\n\r\n\r\nelev\r\n\r\n\r\n-0.0284552\r\n\r\n\r\n0.0017078\r\n\r\n\r\n-16.662187\r\n\r\n\r\n0.0000000\r\n\r\n\r\nslope_over_20\r\n\r\n\r\n-3.8610019\r\n\r\n\r\n1.8661581\r\n\r\n\r\n-2.068958\r\n\r\n\r\n0.0386351\r\n\r\n\r\nmedian_income\r\n\r\n\r\n-0.0000099\r\n\r\n\r\n0.0000054\r\n\r\n\r\n-1.852361\r\n\r\n\r\n0.0640717\r\n\r\n\r\nTest OLS Assumptions\r\nRecall our four key assumptions for OLS:\r\nThe population relationship is linear in parameters with an additive disturbance.\r\nOur \\(X\\) variables are exogenous, i.e., \\(\\mathop{\\boldsymbol{E}}\\left[ u \\mid X \\right] = 0\\).\r\nThe \\(X\\) variables have variation.\r\nThe population disturbances \\(u_i\\) are independently and identically distributed as normal random variables with mean zero \\(\\left( \\mathop{\\boldsymbol{E}}\\left[ u \\right] = 0 \\right)\\) and variance \\(\\sigma^2\\) (i.e., \\(\\mathop{\\boldsymbol{E}}\\left[ u^2 \\right] = \\sigma^2\\))\r\nWe assume that assumptions 1 and 2 hold. Assumption 3 holds because we see that the \\(x\\) variables have variation in the plots above. Below, the residuals are generated from the main regression and are used to assess the three components of assumption #4.\r\n\r\n\r\nShow code\r\n\r\ncrime_lm <- crimes_summary %>% \r\n  add_predictions(model = lm(count ~ elev + slope_over_20 + median_income, data = crimes_summary)) %>% \r\n  mutate(res = count - pred)\r\n\r\nggplot(data = crime_lm, aes(x = res)) +\r\n  geom_histogram(binwidth = 5, fill = \"darkblue\", col = \"black\") + \r\n  labs(title = \"Residual Plot\",\r\n       x = \"Residuals\",\r\n       y = \"Count\") +\r\n  theme_classic()\r\n\r\n\r\n\r\n\r\nThe residuals do not appear to be normally distributed. There is a long right tail with high outliers. This indicates that the regression analysis is systematically under-predicting counts of car break-ins.\r\n\r\n\r\nShow code\r\n\r\nggplot(data = crime_lm, aes(sample = res)) +\r\n  geom_qq() +\r\n  geom_qq_line() +\r\n  theme_classic()\r\n\r\n\r\n\r\n\r\nThe qq plot shows that the distribution is mostly normally distributed for values up to approximately 2. This suggests that the model is not normally distributed for extreme high values.\r\n\r\n\r\nShow code\r\n\r\nx <- ggplot(data = crime_lm, aes(x = count, y = res)) +\r\n  geom_point() + theme_classic() +\r\n  labs(title = \"Residuals vs Dependent Variable\")\r\n\r\ny1 <- ggplot(data = crime_lm, aes(x = elev, y = res)) +\r\n  geom_point() + theme_classic() + \r\n  labs(title = \"Residuals vs. Explanatory Variable (Elevation)\")\r\n\r\ny2 <- ggplot(data = crime_lm, aes(x = slope_over_20, y = res)) +\r\n  geom_point() + theme_classic() + \r\n  labs(title = \"Residuals vs. Explanatory Variable (Slope)\")\r\n\r\ny3 <- ggplot(data = crime_lm, aes(x = median_income, y = res)) +\r\n  geom_point() + theme_classic() + \r\n  labs(title = \"Residuals vs. Explanatory Variable (Income)\")\r\n\r\n(x + y1) / (y2 + y3)\r\n\r\n\r\n\r\n\r\nSince assumptions 1, 2, and 3 appear to be satisfied, using OLS in this case is an unbiased estimator. However, residual plots indicate that assumption 4 may not be satisfied and therefore OLS may not be the estimator with lowest variance. Thus, an alternative estimator to OLS may provide estimates of the true population parameters with less variance.\r\nResults\r\n\r\n\r\n\r\nKim, Young-An, and James C. Wo. 2021. “Topography and Crime in Place: The Effects of Elevation, Slope, and Betweenness in San Francisco Street Segments.” Journal of Urban Affairs 0 (0): 1–25. https://doi.org/10.1080/07352166.2021.1901591.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-11-02-sf-crime-and-hilliness/images/crime_hills.jpg",
    "last_modified": "2021-11-27T18:41:17-08:00",
    "input_file": "sf-crime-and-hilliness.knit.md"
  },
  {
    "path": "posts/2021-10-18-ames-open-space-flooding/",
    "title": "Ames Open Space Flooding",
    "description": "Returning home from college a few years ago, I went on a hike at a local town open space only to find the trail flooded due to beaver activity. So, I created an ArcGIS Story Map to visualize the extent of the change in landscape.",
    "author": [
      {
        "name": "Alex Clippinger",
        "url": {}
      }
    ],
    "date": "2021-10-18",
    "categories": [
      "GIS"
    ],
    "contents": "\r\n\r\nGraphic showing the change in landscape from 2012 to 2018 in the Ames Open Space.\r\nThis is a small side-project that I completed last year. I was curious to see the extent of flooding at one of my favorite Open Spaces in my hometown - the Town of Old Lyme Ames Open Space.\r\nAt the time, I was in the middle of my Graduate Certificate in GIS and volunteering with the Old Lyme Land Trust, so I wanted to test my ability to communicate technical information to a non-technical crowd. Although brief, this ArcGIS Story Map successfully demonstrated the flooding and was ultimately shared with the town Open Space Commission as an educational reference.\r\nHere is the link to the full Story Map\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-10-18-ames-open-space-flooding/images/ames-open-space.png",
    "last_modified": "2021-11-11T11:10:25-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-09-20-old-lyme-ospreys-2020-season-review/",
    "title": "Old Lyme Ospreys - 2020 Review",
    "description": "Once facing extinction, the Connecticut Osprey population has made a substantial comeback. This post looks at the most recent 2020 Osprey Nation Report by the Connecticut Audobon Society, released on March 5, 2021. Specifically, I focus on a coastal town known for it's birding and wildlife (that also happens to be my hometown!) - Old Lyme.",
    "author": [
      {
        "name": "Alex Clippinger",
        "url": {}
      }
    ],
    "date": "2021-09-20",
    "categories": [
      "R",
      "GIS"
    ],
    "contents": "\r\n\r\nContents\r\nOsprey Nation\r\nStewards\r\n\r\nOspreys in Connecticut\r\nLoading the Data\r\nOspreys in Old Lyme, CT\r\nVisualizing the Data\r\nRecommendations\r\nReflections\r\n\r\nSource for data and Osprey Nation 2020 report: https://www.ctaudubon.org/osprey-nation-home/\r\nOsprey Nation\r\nThe CT Audobon’s Osprey Nation is a citizen-science project launched in 2014 that collects data on Osprey nesting in Connecticut every year. As such, the initiative relies on volunteer stewards to monitor the vast number of nests in Connecticut, with a record 733 monitored in 2020 despite the COVID-19 pandemic. Stewards collect and send in data on osprey arrival dates each spring, nest locations, nesting success, and departure dates.\r\nStewards\r\n\r\n\r\nShow code\r\n\r\n# Create data frame columns\r\nyear = c(2014:2020)\r\nstewards = c(100, 146, 224, 287, 314, 342, 231)\r\nnests_with_data = c(174, 322, 420, 540, 603, 732, 733)\r\nactive_nests = c(210, 250, 337, 394, 416, 501, 510)\r\nfledglings = c(NA, 356, 490, 607, 725, 650, \"549/744 estimated\")\r\nfledlings_per_nest = c(NA, 0.69, 0.80, 0.89, 0.93, 0.81, NA)\r\n\r\n# Create data frame\r\ndf <- data.frame(year, stewards, nests_with_data, active_nests, fledglings, fledlings_per_nest)\r\n\r\n# Make NA values blank\r\nopts <- options(knitr.kable.NA = \"\")\r\n\r\n# Create center aligned data table\r\nknitr::kable(df, align = \"cccccc\")\r\n\r\n\r\n\r\nyear\r\n\r\n\r\nstewards\r\n\r\n\r\nnests_with_data\r\n\r\n\r\nactive_nests\r\n\r\n\r\nfledglings\r\n\r\n\r\nfledlings_per_nest\r\n\r\n\r\n2014\r\n\r\n\r\n100\r\n\r\n\r\n174\r\n\r\n\r\n210\r\n\r\n\r\n\r\n\r\n\r\n\r\n2015\r\n\r\n\r\n146\r\n\r\n\r\n322\r\n\r\n\r\n250\r\n\r\n\r\n356\r\n\r\n\r\n0.69\r\n\r\n\r\n2016\r\n\r\n\r\n224\r\n\r\n\r\n420\r\n\r\n\r\n337\r\n\r\n\r\n490\r\n\r\n\r\n0.80\r\n\r\n\r\n2017\r\n\r\n\r\n287\r\n\r\n\r\n540\r\n\r\n\r\n394\r\n\r\n\r\n607\r\n\r\n\r\n0.89\r\n\r\n\r\n2018\r\n\r\n\r\n314\r\n\r\n\r\n603\r\n\r\n\r\n416\r\n\r\n\r\n725\r\n\r\n\r\n0.93\r\n\r\n\r\n2019\r\n\r\n\r\n342\r\n\r\n\r\n732\r\n\r\n\r\n501\r\n\r\n\r\n650\r\n\r\n\r\n0.81\r\n\r\n\r\n2020\r\n\r\n\r\n231\r\n\r\n\r\n733\r\n\r\n\r\n510\r\n\r\n\r\n549/744 estimated\r\n\r\n\r\n\r\n\r\nThe table above shows the progression of the Osprey Nation project over time. Notably, 2020 saw a decrease in stewards and fledglings observed due to difficulties with participation during the COVID-19 pandemic.\r\nOspreys in Connecticut\r\n\r\nOspreys in Essex Land Trust.\r\nAccording to the CT DEEP, the osprey population in Connecticut reached a record low of only 9 active nests in 1974. The population suffered from pressure due to coastal development and DDT contamination causing eggshell thinning. Since the banning of DDT and restrictions on other pesticides in the 1970s, their population in the state has steadily been on the rise.\r\nSource: https://portal.ct.gov/DEEP/Wildlife/Fact-Sheets/Osprey\r\nLoading the Data\r\nAlong with the annual report, Osprey Nation publishes data on nest locations, type, stewards, monitored status, and description.\r\nHere is the interactive data map provided on the Osprey Nation website:\r\n\r\n\r\nI downloaded the data from the map above as a .kmz file, which I loaded in QGIS. To create the subset of only Old Lyme nests, I created a buffer of the town boundary and used the Select by location tool in the QGIS Processing Toolbox. This could have also been achieved in R by filtering on the name column of the all_nests data set, since all Old Lyme nests begin with “Old Lyme”.\r\n\r\n\r\nShow code\r\n\r\n# Load all nests dataset\r\nall_nests <- read.csv(file = \"data/All_Nests.csv\") %>% \r\n  clean_names() %>% \r\n  rename(\"x2021_status\" = 19) %>% \r\n  select(-(description:icon)) \r\n\r\n# load old lyme data only\r\nol_nests <- read.csv(file = \"data/OL-Only_Nests.csv\") %>% \r\n  clean_names() %>% \r\n  rename(\"x2021_status\" = 19) %>% \r\n  select(-(descriptio:icon))\r\n\r\n\r\n\r\nOspreys in Old Lyme, CT\r\nFor this blog, I am looking at the town of Old Lyme, CT. This is for a few reasons…\r\nOld Lyme is my hometown!\r\n~10% of nests in the state are found in the town’s coastline and rivers.\r\nGreat Island and the Lower Connecticut River Valley area are important ecological and conservation areas. The CT Audobon reports that the greatest concentration of Osprey nests in the state is on Great Island.\r\nOf the 231 stewards that volunteered for the project in 2020, there were 26 unique stewards who collected data in Old Lyme.\r\nVisualizing the Data\r\nFirst, I wanted to see how many nests were actively monitored in 2020.\r\n\r\n\r\nShow code\r\n\r\n# ALL NESTS\r\n\r\n# create data set with counts of nests by monitored status\r\nall_nests_monitored <- all_nests %>% \r\n  \r\n  # select only monitored status column\r\n  select(monitored_y_n) %>% \r\n  \r\n  # count by monitored status\r\n  group_by(monitored_y_n) %>% \r\n  summarize(count = n()) %>%\r\n  \r\n  # Add dummy year value for plot\r\n  mutate(year = \"2020\") %>% \r\n  \r\n  # Add proportion of total\r\n  mutate(freq = round(count / sum(count), 2))\r\n\r\n# plot monitored status\r\nall <- ggplot(data = all_nests_monitored, aes(x = year, y = freq, fill = monitored_y_n, label = freq)) +\r\n  geom_col(position = \"fill\", stat = \"identity\") +\r\n  geom_text(size = 2.5, position = position_stack(vjust = 0.5)) +\r\n  scale_fill_manual(values = c(\"#fdb813\", \"#0079c2\")) +\r\n  theme(\r\n    legend.position = \"none\",\r\n    panel.background = element_blank(),\r\n    axis.text.y = element_blank(),\r\n    axis.ticks.y = element_blank(),\r\n    axis.title.y = element_blank(),\r\n    axis.text.x = element_blank(),\r\n    #axis.ticks.x = element_blank(),\r\n    axis.title.x = element_text(),\r\n    plot.margin = margin(0,0,0,0,\"pt\")\r\n  ) + \r\n  labs(x = \"All Nests\")\r\n  \r\n# OLD LYME ONLY\r\n\r\n# create data set with counts of nests by monitored status\r\nol_nests_monitored <- ol_nests %>% \r\n  \r\n  # select only monitored status column\r\n  select(monitored) %>% \r\n  \r\n  # count by monitored status\r\n  group_by(monitored) %>% \r\n  summarize(count = n()) %>%\r\n  \r\n  # Add dummy year value for plot\r\n  mutate(year = \"2020\") %>% \r\n  \r\n  # Add proportion of total\r\n  mutate(freq = round(count / sum(count), 2))\r\n\r\n\r\n# plot monitored status\r\nol <- ggplot(data = ol_nests_monitored, aes(x = year, y = freq, fill = monitored, label = freq)) +\r\n  geom_col(position = \"fill\", stat = \"identity\") +\r\n  geom_text(size = 2.5, position = position_stack(vjust = 0.5)) +\r\n  scale_fill_manual(values = c(\"#fdb813\", \"#0079c2\")) +\r\n  theme(\r\n    legend.title = element_blank(),\r\n    panel.background = element_blank(),\r\n    axis.text.y = element_blank(),\r\n    axis.ticks.y = element_blank(),\r\n    axis.title.y = element_blank(),\r\n    axis.text.x = element_blank(),\r\n    #axis.ticks.x = element_blank(),\r\n    axis.title.x = element_text(),\r\n    plot.margin = margin(0,0,0,0,\"pt\")\r\n  ) + \r\n  labs(x = \"Old Lyme Nests\")\r\n\r\nall + ol +\r\n  plot_annotation(title = \"What Percent of Nests Were Actively Monitored in 2020?\",\r\n                  theme = theme(plot.title = element_text(hjust = 0.5)))\r\n\r\n\r\n\r\n\r\nIn my datasets, there are 958 total nests and 95 nests in Old Lyme. This plot shows that 91% of these nests in the entire state and 96% of nests in Old Lyme were actively monitored in 2020.\r\nNext, let’s look at the types of nests that exist. Looking at the data set of all 958 nests in Connecticut, there are a staggering 200 unique nest types entered by stewards (after accounting for capitalization and white space). Many of these are different ways of saying the same thing: For example, a light pole could be entered as light post, electric pole, utility pole, on a light pole, light tower, light fixture, etc. In addition, some nest types included notes, such as dates that platforms were built or “difficult to see”.\r\nInstead of re-categorizing all of these nests here, I will simply highlight the most common nest types and the need for standardization of this column in future years.\r\n\r\n\r\nShow code\r\n\r\nall_nest_types <- all_nests %>% \r\n  \r\n  # select only nest type column\r\n  select(nest_type) %>% \r\n  \r\n  # remove blanks\r\n  filter(nest_type != \"\") %>% \r\n  \r\n  # aggregate strings with different cases and white space\r\n  mutate(nest_type = tolower(nest_type)) %>% \r\n  mutate(nest_type = trimws(nest_type)) %>% \r\n  \r\n  # count by nest type\r\n  group_by(nest_type) %>% \r\n  summarize(count = n()) %>% \r\n  \r\n  # only show top 10 most common nest types\r\n  arrange(desc(count)) %>% \r\n  slice(1:10)\r\n\r\nggplot(data = all_nest_types, aes(x = count, y = reorder(nest_type, count), fill = nest_type)) +\r\n  geom_col() +\r\n  geom_text(aes(label = count), vjust = 0.5, hjust = -.5, size = 2.5) +\r\n  scale_fill_paletteer_d(\"RColorBrewer::Paired\") +\r\n  theme_minimal() +\r\n  theme(\r\n    legend.position = \"none\",\r\n    axis.title.y = element_blank(),\r\n    axis.text.y = element_text(margin = margin(t = 0, r = -15, b = 0, l = 0, unit = \"pt\")),\r\n    panel.grid.major.y = element_blank()\r\n  ) +\r\n  labs(\r\n    title = \"What Are The Top 10 Most Common Nest Types?\",\r\n    x = \"Count\"\r\n  )\r\n\r\n\r\n\r\n\r\nThis plot shows that platform nests are by far the most common nest type, making up ~35% of all nests. It is important to note that 191 nests had no data on nest type, representing ~20% of all nests.\r\n\r\n\r\nShow code\r\n\r\nol_nest_types <- ol_nests %>% \r\n  \r\n  # select only nest type column\r\n  select(nest_type) %>%\r\n  \r\n  # aggregate strings with different cases and white space\r\n  mutate(nest_type = tolower(nest_type)) %>% \r\n  mutate(nest_type = trimws(nest_type)) %>% \r\n  \r\n  # count by nest type\r\n  group_by(nest_type) %>% \r\n  summarize(count = n()) %>% \r\n  \r\n  # arrange by count desc\r\n  arrange(desc(count))\r\n\r\n\r\n\r\n60 of the 95 nests in Old Lyme had no data on nest type, making up ~31% of missing nest types despite Old Lyme only holding ~10% of total nests. 19 of the 35 nests with data inputted were platforms, which is consistent with the overall data set.\r\nThe map below highlights the nests in Old Lyme with missing nest type data for potential data capture in the next year’s report:\r\n\r\nMap of Missing Nest Type Data in Old Lyme, CT.\r\nNests with missing data are spatially distributed throughout the town’s coastline. This data should be collected to allow for potential analysis of the relationship between nest type and success rates of fledglings.\r\nFinally, I want to look at the final nest status data.\r\n\r\nMap of Nest Status at the end of the 2020 Osprey season in Old Lyme, CT.\r\nThe success of the nest appears to be randomly distributed across all locations. Many sites on Great Island were left as “Active”, which indicates that a final report on fledglings was not obtained. This could be due to the difficulty of access for some of these sites.\r\n\r\n\r\nShow code\r\n\r\nol_nests_status <- ol_nests %>% \r\n  \r\n  # select only 2021 status column\r\n  select(x2021_status) %>% \r\n  \r\n  # count by nest status\r\n  group_by(x2021_status) %>% \r\n  summarize(count = n()) %>% \r\n  \r\n  # add a readable column for status\r\n  mutate(status_desc = case_when(x2021_status == \"AB\" ~ \"No Incubation\",\r\n                                 x2021_status == \"A\" ~ \"Active\",\r\n                                 x2021_status == \"S(2)\" ~ \"Successful (2 Fledglings)\",\r\n                                 x2021_status == \"NU\" ~ \"Needs Update\",\r\n                                 x2021_status == \"ND\" ~ \"No Data\",\r\n                                 x2021_status == \"S(1)\" ~ \"Successful (1 Fledling)\",\r\n                                 x2021_status == \"IF\" ~ \"Incubation Failure\",\r\n                                 x2021_status == \"S(3)\" ~ \"Successful (3 Fledlings)\",\r\n                                 x2021_status == \"PH\" ~ \"Post-Hatch Failure\",\r\n                                 x2021_status == \"DR\" ~ \"Damaged/Removed\",\r\n                                 x2021_status == \"S(4)\" ~ \"Successful (4 Fledglings)\"))\r\n\r\nggplot(data = ol_nests_status, aes(x = count, y = reorder(status_desc, count), fill = x2021_status)) +\r\n  geom_col() +\r\n  geom_text(aes(label = count), vjust = 0.5, hjust = -.5, size = 2.5) +\r\n  scale_fill_paletteer_d(\"RColorBrewer::Paired\") +\r\n  theme_minimal() +\r\n  theme(\r\n    legend.position = \"none\",\r\n    axis.title.y = element_blank(),\r\n    axis.text.y = element_text(margin = margin(t = 0, r = -15, b = 0, l = 0, unit = \"pt\")),\r\n    panel.grid.major.y = element_blank()\r\n  ) +\r\n  labs(\r\n    title = \"Old Lyme Final Nest Status Data 2020\",\r\n    x = \"Count\"\r\n  )\r\n\r\n\r\n\r\n\r\nThe plot above shows the final status of nests in Old Lyme for 2020. In all, there were 16 successful nests out of the total of 95, with 30 fledglings reported and likely more unreported. In summary, Old Lyme has ~10% of the state’s nests and yielded 5.88% of reported fledglings.\r\nFinally, here is a fun heat map of nest locations in the town:\r\n\r\nHeatmap of Nests in Old Lyme, CT.\r\nThis illustrates the density of nests on and around Great Island - which holds the most nests in one place in all of Connecticut! It is evident that this area is deserving of the conservation and appreciation that it deserves.\r\nRecommendations\r\nCritical information such as osprey arrival dates and departure dates are difficult to analyze as they are only included in a verbose “description” column. Key statistics like these should be saved in separate columns in order to be more useful for long-term insights.\r\nReflections\r\nThis was my first attempt at an independent blog post focusing on data visualization. The main difficulty was finding the time to work on this project while balancing work and graduate school! Nonetheless, I learned a lot about integrating text, plots, and maps to tell a story. In the future, I hope to improve my skills in all three of these areas. Also, I hope to make blog posts that are more interactive.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-09-20-old-lyme-ospreys-2020-season-review/images/ct-audobon-logo.png",
    "last_modified": "2021-11-11T10:57:12-08:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-08-16-meds-week-3-recap/",
    "title": "MEDS Week 3 Recap",
    "description": "A reflection on the first few weeks as part of the inaugural cohort of the Master of Environmental Data Science program at the Bren School of Environmental Science & Management, UCSB.",
    "author": [
      {
        "name": "Alex Clippinger",
        "url": {}
      }
    ],
    "date": "2021-08-16",
    "categories": [
      "general"
    ],
    "contents": "\r\n\r\nMy classmates and I in the brand new classroom space at the National Center for Ecological Analysis & Synthesis (NCEAS)\r\nWe are in week 3 of the Master of Environmental Data Science (MEDS) program at the Bren School of Environmental Science & Management at UCSB. So far in our summer intensive coursework, we have focused on essential math/statistics, programming (in R), and git skills that will be essential for the rest of the program. Here are a few things that we’ve learned…\r\nR functions\r\nSince this is a data science oriented program, we quickly covered basic R syntax before moving on to learning various methods of getting data into more usable formats.\r\nHere is a brief example of using the dplyr group_by and summarize functions to find the mean body weight (in grams) of penguin species within the palmerpenguins R data package, created by our professor Dr. Allison Horst!\r\n\r\n\r\nShow code\r\n\r\n# Example using the palmerpenguins dataset\r\npenguins_summary <- penguins %>% \r\n  group_by(species) %>% \r\n  summarize(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE))\r\n\r\npenguins_summary %>% kable()\r\n\r\n\r\n\r\nspecies\r\n\r\n\r\nmean_body_mass_g\r\n\r\n\r\nAdelie\r\n\r\n\r\n3700.662\r\n\r\n\r\nChinstrap\r\n\r\n\r\n3733.088\r\n\r\n\r\nGentoo\r\n\r\n\r\n5076.016\r\n\r\n\r\nEssential Concepts\r\nWe have also learned fundamental ideas for working with data. One such concept is tidy data, which refers to the following qualities:\r\nEach column contains a single variable\r\nEach row contains a single observation\r\nEach cell contains a single value\r\nThis is relevant for other important topics that we’ve covered, such as scientific reproducibility.\r\nHow to Create a Website!\r\nHaving a personal website to share my work through moving forward is incredibly exciting. I hope to fill this site with personal work and my data-science intensive Capstone Project that will be completed in June, 2022.\r\nThis website is also version-controlled on GitHub!\r\nTakeaways\r\nIn the initial weeks, the MEDS program has been rewarding and challenging. I have learned to think critically and deliberately about every line of code or decision. Additionally, I can already see the profound impact that a supportive and collaborative community can make on learning this type of material. Our group of 25 students is full of inspiring and hard-working individuals from a wide variety of backgrounds, and I look forward to working together in the next year!\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-08-16-meds-week-3-recap/images/logo-bren.svg",
    "last_modified": "2021-11-11T11:43:57-08:00",
    "input_file": {}
  }
]
